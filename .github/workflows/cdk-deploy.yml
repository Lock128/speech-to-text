# AWS CDK CI/CD Pipeline
# 
# This workflow uses OIDC (OpenID Connect) for secure AWS authentication without long-lived access keys.
# 
# Required GitHub Secrets:
# - AWS_ROLE_TO_ASSUME: ARN of the IAM role for production deployments
# - AWS_ROLE_TO_ASSUME_DEV: ARN of the IAM role for development deployments  
# - AWS_REGION: AWS region for deployments (e.g., us-east-1)
#
# Required AWS Setup:
# 1. Create an OIDC identity provider in AWS IAM
# 2. Create IAM roles with trust policies that allow GitHub Actions to assume them
# 3. Attach necessary policies to the roles (CDK deployment permissions)
#
# Example trust policy for the IAM role:
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Effect": "Allow",
#       "Principal": {
#         "Federated": "arn:aws:iam::ACCOUNT-ID:oidc-provider/token.actions.githubusercontent.com"
#       },
#       "Action": "sts:AssumeRoleWithWebIdentity",
#       "Condition": {
#         "StringEquals": {
#           "token.actions.githubusercontent.com:aud": "sts.amazonaws.com",
#           "token.actions.githubusercontent.com:sub": "repo:YOUR-ORG/YOUR-REPO:ref:refs/heads/main"
#         }
#       }
#     }
#   ]
# }

name: AWS CDK CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'speech-to-email-backend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'speech-to-email-backend/**' ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: '18'

jobs:
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: speech-to-email-backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./speech-to-email-backend

      - name: Lint code
        run: npm run lint || echo "Linting not configured"
        working-directory: ./speech-to-email-backend

      - name: Run unit tests
        run: npm test
        working-directory: ./speech-to-email-backend

      - name: Build TypeScript
        run: npm run build
        working-directory: ./speech-to-email-backend

      - name: CDK Synth
        run: npx cdk synth --all
        working-directory: ./speech-to-email-backend

      - name: Upload CDK templates
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates
          path: speech-to-email-backend/cdk.out/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: speech-to-email-backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./speech-to-email-backend

      - name: Run security audit
        run: npm audit --audit-level=high
        working-directory: ./speech-to-email-backend

      - name: Check for vulnerabilities
        run: |
          cd speech-to-email-backend
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -q '^0$'; then
            echo "✅ No high-severity vulnerabilities found"
          else
            echo "❌ High-severity vulnerabilities detected"
            npm audit --audit-level=high
            exit 1
          fi

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: speech-to-email-backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./speech-to-email-backend

      - name: Debug OIDC Configuration (Dev)
        run: |
          echo "=== Development Deployment Debug ==="
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Expected subject: repo:${{ github.repository }}:ref:${{ github.ref }}"
          echo "Role ARN: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}"
          echo "Region: ${{ secrets.AWS_REGION }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-CDK-Dev

      - name: CDK Bootstrap (Development)
        run: |
          echo "Attempting CDK bootstrap..."
          if ! npx cdk bootstrap --context environment=dev; then
            echo "Bootstrap failed, attempting nuclear recovery..."
            
            # Check if CDKToolkit stack exists and its status
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ secrets.AWS_REGION }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_EXISTS")
            echo "CDKToolkit stack status: $STACK_STATUS"
            
            if [ "$STACK_STATUS" != "NOT_EXISTS" ]; then
              echo "Deleting corrupted CDKToolkit stack..."
              aws cloudformation delete-stack --stack-name CDKToolkit --region ${{ secrets.AWS_REGION }}
              
              echo "Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name CDKToolkit --region ${{ secrets.AWS_REGION }} || {
                echo "Stack deletion failed or timed out, continuing anyway..."
              }
            fi
            
            echo "Creating fresh bootstrap..."
            npx cdk bootstrap --context environment=dev
          fi
        working-directory: ./speech-to-email-backend
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: CDK Deploy (Development)
        run: |
          npx cdk deploy --all \
            --require-approval never \
            --context environment=dev \
            --outputs-file cdk-outputs-dev.json
        working-directory: ./speech-to-email-backend
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-dev
          path: speech-to-email-backend/cdk-outputs-dev.json

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: speech-to-email-backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./speech-to-email-backend

      - name: Debug OIDC Configuration
        run: |
          echo "=== GitHub Token Claims ==="
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo ""
          echo "=== Expected Trust Policy Subject ==="
          echo "repo:${{ github.repository }}:ref:${{ github.ref }}"
          echo ""
          echo "=== Role ARN to Assume ==="
          echo "${{ secrets.AWS_ROLE_TO_ASSUME }}"
          echo ""
          echo "=== AWS Region ==="
          echo "${{ secrets.AWS_REGION }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-CDK-Prod

      - name: CDK Bootstrap (Production)
        run: |
          echo "Attempting CDK bootstrap..."
          if ! npx cdk bootstrap --context environment=prod; then
            echo "Bootstrap failed, attempting nuclear recovery..."
            
            # Check if CDKToolkit stack exists and its status
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name CDKToolkit --region ${{ secrets.AWS_REGION }} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_EXISTS")
            echo "CDKToolkit stack status: $STACK_STATUS"
            
            if [ "$STACK_STATUS" != "NOT_EXISTS" ]; then
              echo "Deleting corrupted CDKToolkit stack..."
              aws cloudformation delete-stack --stack-name CDKToolkit --region ${{ secrets.AWS_REGION }}
              
              echo "Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name CDKToolkit --region ${{ secrets.AWS_REGION }} || {
                echo "Stack deletion failed or timed out, continuing anyway..."
              }
            fi
            
            echo "Creating fresh bootstrap..."
            npx cdk bootstrap --context environment=prod
          fi
        working-directory: ./speech-to-email-backend
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: CDK Diff (Production)
        run: npx cdk diff --all --context environment=prod
        working-directory: ./speech-to-email-backend
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: CDK Deploy (Production)
        run: |
          npx cdk deploy --all \
            --require-approval never \
            --context environment=prod \
            --outputs-file cdk-outputs-prod.json
        working-directory: ./speech-to-email-backend
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Upload deployment outputs
        uses: actions/upload-artifact@v4
        with:
          name: cdk-outputs-prod
          path: speech-to-email-backend/cdk-outputs-prod.json

      - name: Post-deployment verification
        run: |
          echo "🚀 Production deployment completed!"
          echo "Verifying deployment..."
          
          # Extract API Gateway URL from outputs
          API_URL=$(cat speech-to-email-backend/cdk-outputs-prod.json | jq -r '.SpeechToEmailStack.ApiGatewayUrl // empty')
          
          if [ ! -z "$API_URL" ]; then
            echo "API Gateway URL: $API_URL"
            # Basic health check
            curl -f "$API_URL/health" || echo "Health check endpoint not available"
          fi

  rollback:
    name: Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: speech-to-email-backend/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./speech-to-email-backend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-CDK-Rollback

      - name: Get previous commit
        run: |
          PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
          echo "PREVIOUS_COMMIT=$PREVIOUS_COMMIT" >> $GITHUB_ENV
          echo "Rolling back to commit: $PREVIOUS_COMMIT"

      - name: Checkout previous version
        run: git checkout ${{ env.PREVIOUS_COMMIT }}

      - name: Install dependencies (previous version)
        run: npm ci
        working-directory: ./speech-to-email-backend

      - name: CDK Deploy (Rollback)
        run: |
          echo "⚠️ Performing rollback deployment..."
          npx cdk deploy --all \
            --require-approval never \
            --context environment=prod
        working-directory: ./speech-to-email-backend
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Notify rollback
        run: |
          echo "🔄 Rollback completed to commit ${{ env.PREVIOUS_COMMIT }}"
          echo "Please investigate the deployment failure and fix the issues."